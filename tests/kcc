#!/usr/bin/env python

import os
import subprocess
import sys

def cc(llvmcc, src, argv):
	out = ''
	outing = False
	for i, a in enumerate(argv):
		if outing:
			out = a
			argv[i] = '-'
			outing = False
		if a == '-o':
			outing = True
	if not out:
		argv += ['-o', '-']
		out = src
	if out != '-':
		out = os.path.splitext(out)[0] + '.ll'
	# Remove -pg to avoid generating mcount calls.
	argv = [x for x in argv if x != '-pg']
	# Linux kernel hack: disable asm goto
	argv = [x for x in argv if x != '-DCC_HAVE_ASM_GOTO']
	more = ['-S', '-flto', '-fstrict-overflow', '-O0', '-g']
	p1 = subprocess.Popen(llvmcc + argv + more, stdout=subprocess.PIPE)
	opts = ['-strip-debug-declare', '-simplifycfg', '-scalarrepl', '-early-cse', '-lower-expect']
	p2 = subprocess.Popen(['opt', '-S', '-o', out] + opts, stdin=p1.stdout)
	p1.stdout.close()
	p2.communicate()
	return p1.returncode

def main():
	llvmcc = os.getenv('LLVMCC', 'clang').split(' ', 1)
	argv = sys.argv[1:]
	# Keep silence if no -c (e.g., -E).
	if '-c' not in argv:
		return
	src = [a for a in argv if a.endswith('.c')]
	# Keep silence if only '-' is given; otherwise we need to duplicate
	# data from stdin for the next consumer (e.g., gcc).
	if not src:
		return
	rc = cc(llvmcc, src[0], list(argv))
	sys.exit(rc)

if __name__ == '__main__':
	main()
